// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/definitions/definitions.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	LastUpdate           int64    `protobuf:"varint,3,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Expiration           int64    `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{0}
}

func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Item) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Item) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *Item) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type AddRequest struct {
	Item                 *Item    `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{1}
}

func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRequest.Unmarshal(m, b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
}
func (m *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(m, src)
}
func (m *AddRequest) XXX_Size() int {
	return xxx_messageInfo_AddRequest.Size(m)
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type CompareAndSwapRequest struct {
	Item                 *Item    `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompareAndSwapRequest) Reset()         { *m = CompareAndSwapRequest{} }
func (m *CompareAndSwapRequest) String() string { return proto.CompactTextString(m) }
func (*CompareAndSwapRequest) ProtoMessage()    {}
func (*CompareAndSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{2}
}

func (m *CompareAndSwapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompareAndSwapRequest.Unmarshal(m, b)
}
func (m *CompareAndSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompareAndSwapRequest.Marshal(b, m, deterministic)
}
func (m *CompareAndSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareAndSwapRequest.Merge(m, src)
}
func (m *CompareAndSwapRequest) XXX_Size() int {
	return xxx_messageInfo_CompareAndSwapRequest.Size(m)
}
func (m *CompareAndSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareAndSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompareAndSwapRequest proto.InternalMessageInfo

func (m *CompareAndSwapRequest) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type DecrementRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Delta                int64    `protobuf:"varint,2,opt,name=delta,proto3" json:"delta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecrementRequest) Reset()         { *m = DecrementRequest{} }
func (m *DecrementRequest) String() string { return proto.CompactTextString(m) }
func (*DecrementRequest) ProtoMessage()    {}
func (*DecrementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{3}
}

func (m *DecrementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecrementRequest.Unmarshal(m, b)
}
func (m *DecrementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecrementRequest.Marshal(b, m, deterministic)
}
func (m *DecrementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecrementRequest.Merge(m, src)
}
func (m *DecrementRequest) XXX_Size() int {
	return xxx_messageInfo_DecrementRequest.Size(m)
}
func (m *DecrementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecrementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecrementRequest proto.InternalMessageInfo

func (m *DecrementRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DecrementRequest) GetDelta() int64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

type IncrementRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Delta                int64    `protobuf:"varint,2,opt,name=delta,proto3" json:"delta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncrementRequest) Reset()         { *m = IncrementRequest{} }
func (m *IncrementRequest) String() string { return proto.CompactTextString(m) }
func (*IncrementRequest) ProtoMessage()    {}
func (*IncrementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{4}
}

func (m *IncrementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementRequest.Unmarshal(m, b)
}
func (m *IncrementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementRequest.Marshal(b, m, deterministic)
}
func (m *IncrementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementRequest.Merge(m, src)
}
func (m *IncrementRequest) XXX_Size() int {
	return xxx_messageInfo_IncrementRequest.Size(m)
}
func (m *IncrementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementRequest proto.InternalMessageInfo

func (m *IncrementRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *IncrementRequest) GetDelta() int64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

type ReplaceRequest struct {
	Item                 *Item    `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplaceRequest) Reset()         { *m = ReplaceRequest{} }
func (m *ReplaceRequest) String() string { return proto.CompactTextString(m) }
func (*ReplaceRequest) ProtoMessage()    {}
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{5}
}

func (m *ReplaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceRequest.Unmarshal(m, b)
}
func (m *ReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceRequest.Marshal(b, m, deterministic)
}
func (m *ReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceRequest.Merge(m, src)
}
func (m *ReplaceRequest) XXX_Size() int {
	return xxx_messageInfo_ReplaceRequest.Size(m)
}
func (m *ReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceRequest proto.InternalMessageInfo

func (m *ReplaceRequest) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type SetRequest struct {
	Item                 *Item    `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}
func (*SetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{6}
}

func (m *SetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRequest.Unmarshal(m, b)
}
func (m *SetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRequest.Marshal(b, m, deterministic)
}
func (m *SetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRequest.Merge(m, src)
}
func (m *SetRequest) XXX_Size() int {
	return xxx_messageInfo_SetRequest.Size(m)
}
func (m *SetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRequest proto.InternalMessageInfo

func (m *SetRequest) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type TouchRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Seconds              int32    `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TouchRequest) Reset()         { *m = TouchRequest{} }
func (m *TouchRequest) String() string { return proto.CompactTextString(m) }
func (*TouchRequest) ProtoMessage()    {}
func (*TouchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{7}
}

func (m *TouchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TouchRequest.Unmarshal(m, b)
}
func (m *TouchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TouchRequest.Marshal(b, m, deterministic)
}
func (m *TouchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TouchRequest.Merge(m, src)
}
func (m *TouchRequest) XXX_Size() int {
	return xxx_messageInfo_TouchRequest.Size(m)
}
func (m *TouchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TouchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TouchRequest proto.InternalMessageInfo

func (m *TouchRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TouchRequest) GetSeconds() int32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type DeleteRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{8}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteAllRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllRequest) Reset()         { *m = DeleteAllRequest{} }
func (m *DeleteAllRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAllRequest) ProtoMessage()    {}
func (*DeleteAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{9}
}

func (m *DeleteAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAllRequest.Unmarshal(m, b)
}
func (m *DeleteAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAllRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllRequest.Merge(m, src)
}
func (m *DeleteAllRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAllRequest.Size(m)
}
func (m *DeleteAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllRequest proto.InternalMessageInfo

type GetRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{10}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Items                []*Item  `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{11}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Reply) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddServerRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddServerRequest) Reset()         { *m = AddServerRequest{} }
func (m *AddServerRequest) String() string { return proto.CompactTextString(m) }
func (*AddServerRequest) ProtoMessage()    {}
func (*AddServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{12}
}

func (m *AddServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddServerRequest.Unmarshal(m, b)
}
func (m *AddServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddServerRequest.Marshal(b, m, deterministic)
}
func (m *AddServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddServerRequest.Merge(m, src)
}
func (m *AddServerRequest) XXX_Size() int {
	return xxx_messageInfo_AddServerRequest.Size(m)
}
func (m *AddServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddServerRequest proto.InternalMessageInfo

func (m *AddServerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type DropServerRequest struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropServerRequest) Reset()         { *m = DropServerRequest{} }
func (m *DropServerRequest) String() string { return proto.CompactTextString(m) }
func (*DropServerRequest) ProtoMessage()    {}
func (*DropServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{13}
}

func (m *DropServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DropServerRequest.Unmarshal(m, b)
}
func (m *DropServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DropServerRequest.Marshal(b, m, deterministic)
}
func (m *DropServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropServerRequest.Merge(m, src)
}
func (m *DropServerRequest) XXX_Size() int {
	return xxx_messageInfo_DropServerRequest.Size(m)
}
func (m *DropServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DropServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DropServerRequest proto.InternalMessageInfo

func (m *DropServerRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type CheckConnectionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckConnectionRequest) Reset()         { *m = CheckConnectionRequest{} }
func (m *CheckConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*CheckConnectionRequest) ProtoMessage()    {}
func (*CheckConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_671b7d4d1004a799, []int{14}
}

func (m *CheckConnectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckConnectionRequest.Unmarshal(m, b)
}
func (m *CheckConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckConnectionRequest.Marshal(b, m, deterministic)
}
func (m *CheckConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckConnectionRequest.Merge(m, src)
}
func (m *CheckConnectionRequest) XXX_Size() int {
	return xxx_messageInfo_CheckConnectionRequest.Size(m)
}
func (m *CheckConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckConnectionRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Item)(nil), "definitions.Item")
	proto.RegisterType((*AddRequest)(nil), "definitions.AddRequest")
	proto.RegisterType((*CompareAndSwapRequest)(nil), "definitions.CompareAndSwapRequest")
	proto.RegisterType((*DecrementRequest)(nil), "definitions.DecrementRequest")
	proto.RegisterType((*IncrementRequest)(nil), "definitions.IncrementRequest")
	proto.RegisterType((*ReplaceRequest)(nil), "definitions.ReplaceRequest")
	proto.RegisterType((*SetRequest)(nil), "definitions.SetRequest")
	proto.RegisterType((*TouchRequest)(nil), "definitions.TouchRequest")
	proto.RegisterType((*DeleteRequest)(nil), "definitions.DeleteRequest")
	proto.RegisterType((*DeleteAllRequest)(nil), "definitions.DeleteAllRequest")
	proto.RegisterType((*GetRequest)(nil), "definitions.GetRequest")
	proto.RegisterType((*Reply)(nil), "definitions.Reply")
	proto.RegisterType((*AddServerRequest)(nil), "definitions.AddServerRequest")
	proto.RegisterType((*DropServerRequest)(nil), "definitions.DropServerRequest")
	proto.RegisterType((*CheckConnectionRequest)(nil), "definitions.CheckConnectionRequest")
}

func init() { proto.RegisterFile("grpc/definitions/definitions.proto", fileDescriptor_671b7d4d1004a799) }

var fileDescriptor_671b7d4d1004a799 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x6b, 0x6b, 0x13, 0x4d,
	0x14, 0xc7, 0x9f, 0x3c, 0x9b, 0x0b, 0x3d, 0xad, 0x35, 0x1d, 0xb4, 0xae, 0x15, 0x43, 0x1c, 0x11,
	0x03, 0x4a, 0x85, 0xa6, 0xa0, 0x14, 0x11, 0x63, 0x02, 0xa1, 0xc5, 0x57, 0x1b, 0xfd, 0x00, 0xe3,
	0xce, 0xb1, 0x09, 0xdd, 0x9b, 0x33, 0x93, 0xaa, 0x1f, 0xd0, 0xef, 0x25, 0xb3, 0x97, 0xec, 0xce,
	0x66, 0x47, 0x89, 0xef, 0xf6, 0xcc, 0xb9, 0xfd, 0xcf, 0xc9, 0xef, 0x10, 0xa0, 0xd7, 0x22, 0xf1,
	0x5f, 0x71, 0xfc, 0xba, 0x8a, 0x56, 0x6a, 0x15, 0x47, 0xb2, 0xfa, 0x7d, 0x9a, 0x88, 0x58, 0xc5,
	0x64, 0xbf, 0xf2, 0x44, 0x23, 0x68, 0x5f, 0x2a, 0x0c, 0x49, 0x1f, 0x9c, 0x1b, 0xfc, 0xe9, 0xb6,
	0x86, 0xad, 0xd1, 0x9e, 0xa7, 0x3f, 0xc9, 0x3d, 0xe8, 0xdc, 0xb2, 0x60, 0x8d, 0xee, 0xff, 0xc3,
	0xd6, 0xe8, 0xc0, 0xcb, 0x0c, 0x32, 0x00, 0x08, 0x98, 0x54, 0x9f, 0x13, 0xce, 0x14, 0xba, 0xce,
	0xb0, 0x35, 0x72, 0xbc, 0xca, 0x8b, 0xf6, 0xe3, 0x8f, 0x64, 0x25, 0x98, 0x2e, 0xef, 0xb6, 0x33,
	0x7f, 0xf9, 0x42, 0xc7, 0x00, 0x13, 0xce, 0x3d, 0xfc, 0xb6, 0x46, 0xa9, 0xc8, 0x33, 0x68, 0xaf,
	0x14, 0x86, 0x69, 0xdb, 0xfd, 0xb3, 0xa3, 0xd3, 0xaa, 0x58, 0x2d, 0xcb, 0x4b, 0xdd, 0xf4, 0x1d,
	0xdc, 0x9f, 0xc6, 0x61, 0xc2, 0x04, 0x4e, 0x22, 0xbe, 0xf8, 0xce, 0x92, 0x1d, 0xf3, 0x2f, 0xa0,
	0x3f, 0x43, 0x5f, 0x60, 0x88, 0x91, 0x2a, 0x52, 0x1b, 0x07, 0xe6, 0x18, 0x28, 0x96, 0x0e, 0xec,
	0x78, 0x99, 0xa1, 0x73, 0x2f, 0xa3, 0x7f, 0xcc, 0x7d, 0x0d, 0x87, 0x1e, 0x26, 0x01, 0xf3, 0x71,
	0x47, 0xc1, 0x63, 0x80, 0x05, 0xaa, 0x9d, 0xa7, 0x3c, 0xf8, 0x14, 0xaf, 0xfd, 0xa5, 0x5d, 0xa5,
	0x0b, 0x3d, 0x89, 0x7e, 0x1c, 0x71, 0x99, 0xea, 0xec, 0x78, 0x85, 0x49, 0x9f, 0xc0, 0x9d, 0x19,
	0x06, 0xa8, 0xd0, 0x9a, 0x4c, 0x89, 0x5e, 0xa2, 0x0e, 0x99, 0x04, 0x41, 0x1e, 0x45, 0x07, 0x00,
	0x73, 0xb4, 0xaf, 0x85, 0x5e, 0x41, 0x47, 0x2f, 0x20, 0xed, 0x1c, 0xa2, 0x94, 0xec, 0x1a, 0x73,
	0x77, 0x61, 0x92, 0xe7, 0xd0, 0xd1, 0xea, 0xb5, 0x22, 0xa7, 0x79, 0xba, 0xcc, 0x4f, 0x5f, 0x42,
	0x7f, 0xc2, 0xf9, 0x02, 0xc5, 0x2d, 0x8a, 0xa2, 0xa3, 0x0b, 0x3d, 0xc6, 0xb9, 0x40, 0x29, 0x8b,
	0xb2, 0xb9, 0x49, 0x5f, 0xc0, 0xd1, 0x4c, 0xc4, 0x89, 0x19, 0x7e, 0x0c, 0x5d, 0x99, 0x3e, 0xe4,
	0xd1, 0xb9, 0x45, 0x5d, 0x38, 0x9e, 0x2e, 0xd1, 0xbf, 0x99, 0xc6, 0x51, 0x84, 0xbe, 0x6e, 0x9d,
	0x67, 0x9c, 0xfd, 0xea, 0x42, 0x8f, 0x0b, 0x9f, 0xf9, 0x4b, 0x24, 0xe7, 0xe0, 0x4c, 0x38, 0x27,
	0x0f, 0x0c, 0x85, 0x25, 0xcc, 0x27, 0xc4, 0x70, 0xa4, 0x73, 0xd3, 0xff, 0xc8, 0x15, 0x1c, 0x9a,
	0xec, 0x12, 0x6a, 0xc4, 0x35, 0x82, 0x6d, 0xa9, 0xf5, 0x1e, 0xf6, 0x36, 0x1c, 0x93, 0xc7, 0x46,
	0x48, 0x9d, 0x6f, 0x7b, 0x85, 0x0d, 0xcd, 0xb5, 0x0a, 0x75, 0xca, 0x2d, 0x15, 0xde, 0x42, 0x2f,
	0x67, 0x9a, 0x3c, 0xda, 0x0a, 0x28, 0x49, 0xb7, 0x64, 0x9f, 0x83, 0xb3, 0x40, 0x55, 0xdb, 0x61,
	0x89, 0xba, 0x25, 0xeb, 0x0d, 0x74, 0x52, 0xb2, 0xc9, 0x43, 0xc3, 0x5d, 0xa5, 0xdd, 0x92, 0x79,
	0x01, 0xdd, 0x0c, 0x5a, 0x72, 0x52, 0x5b, 0x57, 0x05, 0xf6, 0x3f, 0x6d, 0x3b, 0x07, 0x7e, 0x6b,
	0xdb, 0xe6, 0x21, 0xd8, 0xa7, 0x9d, 0x6f, 0x4d, 0x3b, 0xc7, 0xbf, 0xff, 0x46, 0x1b, 0xd0, 0x6b,
	0x7d, 0xeb, 0x07, 0x60, 0xa9, 0xf0, 0x01, 0xa0, 0x84, 0x9f, 0x0c, 0x4c, 0xe9, 0xf5, 0xab, 0xb0,
	0xd4, 0xf8, 0x08, 0x77, 0x6b, 0x37, 0x41, 0x9e, 0x9a, 0xe0, 0x36, 0x5e, 0x4c, 0x73, 0xb5, 0x2f,
	0xdd, 0xf4, 0xaf, 0x67, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x77, 0xe9, 0xbf, 0x0f, 0xa0, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DrcacheClient is the client API for Drcache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DrcacheClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*Reply, error)
	CompareAndSwap(ctx context.Context, in *CompareAndSwapRequest, opts ...grpc.CallOption) (*Reply, error)
	Decrement(ctx context.Context, in *DecrementRequest, opts ...grpc.CallOption) (*Reply, error)
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*Reply, error)
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*Reply, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Reply, error)
	Touch(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (*Reply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Reply, error)
	DeleteAll(ctx context.Context, in *DeleteAllRequest, opts ...grpc.CallOption) (*Reply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Reply, error)
	AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*Reply, error)
	DropServer(ctx context.Context, in *DropServerRequest, opts ...grpc.CallOption) (*Reply, error)
	CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*Reply, error)
}

type drcacheClient struct {
	cc *grpc.ClientConn
}

func NewDrcacheClient(cc *grpc.ClientConn) DrcacheClient {
	return &drcacheClient{cc}
}

func (c *drcacheClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) CompareAndSwap(ctx context.Context, in *CompareAndSwapRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/CompareAndSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) Decrement(ctx context.Context, in *DecrementRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Decrement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) Touch(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Touch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) DeleteAll(ctx context.Context, in *DeleteAllRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/AddServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) DropServer(ctx context.Context, in *DropServerRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/DropServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drcacheClient) CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/definitions.drcache/CheckConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrcacheServer is the server API for Drcache service.
type DrcacheServer interface {
	Add(context.Context, *AddRequest) (*Reply, error)
	CompareAndSwap(context.Context, *CompareAndSwapRequest) (*Reply, error)
	Decrement(context.Context, *DecrementRequest) (*Reply, error)
	Increment(context.Context, *IncrementRequest) (*Reply, error)
	Replace(context.Context, *ReplaceRequest) (*Reply, error)
	Set(context.Context, *SetRequest) (*Reply, error)
	Touch(context.Context, *TouchRequest) (*Reply, error)
	Delete(context.Context, *DeleteRequest) (*Reply, error)
	DeleteAll(context.Context, *DeleteAllRequest) (*Reply, error)
	Get(context.Context, *GetRequest) (*Reply, error)
	AddServer(context.Context, *AddServerRequest) (*Reply, error)
	DropServer(context.Context, *DropServerRequest) (*Reply, error)
	CheckConnection(context.Context, *CheckConnectionRequest) (*Reply, error)
}

// UnimplementedDrcacheServer can be embedded to have forward compatible implementations.
type UnimplementedDrcacheServer struct {
}

func (*UnimplementedDrcacheServer) Add(ctx context.Context, req *AddRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedDrcacheServer) CompareAndSwap(ctx context.Context, req *CompareAndSwapRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareAndSwap not implemented")
}
func (*UnimplementedDrcacheServer) Decrement(ctx context.Context, req *DecrementRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrement not implemented")
}
func (*UnimplementedDrcacheServer) Increment(ctx context.Context, req *IncrementRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (*UnimplementedDrcacheServer) Replace(ctx context.Context, req *ReplaceRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (*UnimplementedDrcacheServer) Set(ctx context.Context, req *SetRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedDrcacheServer) Touch(ctx context.Context, req *TouchRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Touch not implemented")
}
func (*UnimplementedDrcacheServer) Delete(ctx context.Context, req *DeleteRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDrcacheServer) DeleteAll(ctx context.Context, req *DeleteAllRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (*UnimplementedDrcacheServer) Get(ctx context.Context, req *GetRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDrcacheServer) AddServer(ctx context.Context, req *AddServerRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (*UnimplementedDrcacheServer) DropServer(ctx context.Context, req *DropServerRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropServer not implemented")
}
func (*UnimplementedDrcacheServer) CheckConnection(ctx context.Context, req *CheckConnectionRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnection not implemented")
}

func RegisterDrcacheServer(s *grpc.Server, srv DrcacheServer) {
	s.RegisterService(&_Drcache_serviceDesc, srv)
}

func _Drcache_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_CompareAndSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareAndSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).CompareAndSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/CompareAndSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).CompareAndSwap(ctx, req.(*CompareAndSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_Decrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Decrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Decrement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Decrement(ctx, req.(*DecrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_Touch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Touch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Touch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Touch(ctx, req.(*TouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).DeleteAll(ctx, req.(*DeleteAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/AddServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).AddServer(ctx, req.(*AddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_DropServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).DropServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/DropServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).DropServer(ctx, req.(*DropServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drcache_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrcacheServer).CheckConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/definitions.drcache/CheckConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrcacheServer).CheckConnection(ctx, req.(*CheckConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Drcache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "definitions.drcache",
	HandlerType: (*DrcacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Drcache_Add_Handler,
		},
		{
			MethodName: "CompareAndSwap",
			Handler:    _Drcache_CompareAndSwap_Handler,
		},
		{
			MethodName: "Decrement",
			Handler:    _Drcache_Decrement_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _Drcache_Increment_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _Drcache_Replace_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Drcache_Set_Handler,
		},
		{
			MethodName: "Touch",
			Handler:    _Drcache_Touch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Drcache_Delete_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _Drcache_DeleteAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Drcache_Get_Handler,
		},
		{
			MethodName: "AddServer",
			Handler:    _Drcache_AddServer_Handler,
		},
		{
			MethodName: "DropServer",
			Handler:    _Drcache_DropServer_Handler,
		},
		{
			MethodName: "CheckConnection",
			Handler:    _Drcache_CheckConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/definitions/definitions.proto",
}
